@{
    Layout = null;
}

@model Vault.Controllers.LoginController

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Vault</title>

    <meta name="viewport" content="width=device-width, initial-scale=1">

    @if (ViewBag.NightMode)
    {
        <meta name="theme-color" content="#000000">
        <link rel="stylesheet" type="text/css" href="/manager/css/dark-usercp.css">
        <link rel="stylesheet" type="text/css" href="/manager/css/dark-sweetalert.css">
        <link rel="stylesheet" type="text/css" href="/manager/css/dark-dialog.css">
    }
    else
    {
        <link rel="stylesheet" type="text/css" href="/manager/css/usercp.css">
        <link rel="stylesheet" type="text/css" href="/manager/css/sweetalert.css">
        <link rel="stylesheet" type="text/css" href="/manager/css/dialog.css">
    }
</head>
   

<body onclick="resetContextMenu()" onresize="resetContextMenu()">
    <div id="loader-horizontal"></div>
    <div class="content">
        <div class="topbar">
            <span class="logo">
                <img src="/manager/images/ui/logo.svg" />
            </span>
            <a onclick="showSettings()"><div class="btnSettings"></div></a>
            <a onclick="showLogout()"><div class="btnLogout"></div></a>
            <a onclick="showAbout()"><div class="btnHelp"></div></a>
            <a onclick="showSort()"><div class="btnSort"></div></a>
            <a><div class="btnUpload"></div></a>
            <div class="topbar-hider"></div>
        </div>

        <div class="folder-path" id="folder-path"></div>

        <div id="myfiles" class="dropzone-previews " action="Process/upload" method="post" enctype="multipart/form-data" class="dropzone" id="dropzone">
            <div id="folder-listing"></div>
            <div id="file-listing"></div>
        </div>
        <br>
    </div>

    <div id="previewNoThanks" style="display:none"></div>

    <div id="context-menu" class="menu" oncontextmenu="event.preventDefault()">
        <ul id="context-menu-options" class="menu-options"></ul>
    </div>

    <div id="snack-bar-upload">
        <div id="snack-bar-loader"></div>
        <svg id="snack-bar-checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
            <circle id="snack-bar-checkmark-circle" cx="26" cy="26" r="25" fill="none" />
            <path id="snack-bar-checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
        </svg>
        <div id="snack-bar-text"></div>
        <div id="snack-bar-progress"></div>
    </div>

    <div id="file-viewer" onclick="hideFileViewer()"></div>

    <script type="text/javascript" src="/manager/js/signalr.min.js"></script>
    <script type="text/javascript" src="/manager/js/dropzone.js"></script>
    <script type="text/javascript" src="/manager/js/sweetalert.min.js"></script>
    <script type="text/javascript" src="/manager/js/action.js"></script>

    <script>
        processListFiles();

        new Dropzone(document.body,
        {
            paramName: "file",
            maxFilesize: @ViewBag.MaxUploadSize,
            parallelUploads: 1,
            url: "process/upload",
            clickable: ".btnUpload",
            previewsContainer: "#previewNoThanks",
            processing: function (file) {
                clearTimeout(fadeOutTimer);

                document.getElementById("snack-bar-upload").style.display = "block";
                document.getElementById("snack-bar-upload").style.animation = "fadein 0.4s";
                document.getElementById("snack-bar-upload").style.opacity = "1";

                document.getElementById("snack-bar-loader").style.display = "block";
                document.getElementById("snack-bar-checkmark").style.display = "none";

                document.getElementById("snack-bar-progress").style.borderColor = "#2c80ff";

                document.getElementById("snack-bar-text").innerHTML = "Uploading " + file.name;
            },
            success: function (file, response) {
                if (response === "0")
                    swal("Error!", "An error occured uploading... (could be file limit, file size, etc)", "error");
            },
            error: function (file, response) {
                processListFiles();

                swal("Error!", response, "error");
            },
            totaluploadprogress: function (totalProgress, totalBytes, totalBytesSent) {
                document.getElementById("snack-bar-progress").style.width = `${totalProgress}%`;
            },
            queuecomplete: function ()
            {
                fadeOutTimer = setTimeout(function () {
                    document.getElementById("snack-bar-upload").style.animation = "fadeout 0.6s";
                    document.getElementById("snack-bar-upload").style.opacity = "0";

                    fadeOutTimer = setTimeout(function () {
                        document.getElementById("snack-bar-upload").style.display = "none";
                    }, 600);

                }, 3000);
            },
            complete: function (file) {
                document.getElementById("snack-bar-loader").style.display = "none";
                document.getElementById("snack-bar-checkmark").style.display = "block";

                document.getElementById("snack-bar-progress").style.borderColor = "#7ac142";
                document.getElementById("snack-bar-text").innerHTML = `Uploaded ${this.getAcceptedFiles().length} file${this.getAcceptedFiles().length > 1 ? 's' : ''}...`;
            }
        });
    </script>
</body>
</html>