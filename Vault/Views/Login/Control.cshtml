@{
    Layout = null;
}
@model Vault.Controllers.LoginController
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Vault</title>

    <meta name="viewport" content="width=device-width, initial-scale=1">

    @if (ViewBag.NightMode)
    {
        <meta name="theme-color" content="#000000">
        <link rel="stylesheet" type="text/css" href="css/dark-usercp.css">
        <link rel="stylesheet" type="text/css" href="css/dark-sweetalert.css">
        <link rel="stylesheet" type="text/css" href="css/dark-dialog.css">
    }
    else
    {
        <link rel="stylesheet" type="text/css" href="css/usercp.css">
        <link rel="stylesheet" type="text/css" href="css/sweetalert.css">
        <link rel="stylesheet" type="text/css" href="css/dialog.css">
    }
</head>

<body>
    <div id="loader-horizontal"></div>
    <div class="content">
        <div class="topbar">
            <span class="logo">
                <img src="images/ui/logo.svg" />
            </span>
            <a onclick="showSettings()"><div class="btnSettings"></div></a>
            <a onclick="showLogout()"><div class="btnLogout"></div></a>
            <a onclick="showSearch()"><div class="btnHelp"></div></a>
            <a onclick="processFolderCreate()"><div class="btnSort"></div></a>
            <a><div class="btnUpload"></div></a>
            <div class="topbar-hider"></div>
        </div>

        <div id="folder-path"></div>
        <div id="folder-listing"></div>
        <div id="file-listing"></div>
    </div>

    <div id="intro-box">
        <img src="images/ui/logo.svg" />
    </div>

    <div id="preview" style="display:none"></div>

    <div id="context-menu" class="menu" oncontextmenu="event.preventDefault()">
        <ul id="context-menu-options" class="menu-options"></ul>
    </div>

    <div id="snack-bar-upload">
        <div id="snack-bar-loader"></div>
        <svg id="snack-bar-checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
            <circle id="snack-bar-checkmark-circle" cx="26" cy="26" r="25" fill="none" />
            <path id="snack-bar-checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
        </svg>
        <svg id="snack-bar-x" xmlns="http://www.w3.org/2000/svg" viewBox="-81 -80 350 350">
            <path id="snack-bar-x-check" d="M180.607,10.607l-79.696,79.697l79.696,79.697L170,180.607l-79.696-79.696l-79.696,79.696L0,170.001l79.696-79.697L0,10.607
	        L10.607,0.001l79.696,79.696L170,0.001L180.607,10.607z" />
        </svg>

        <div id="snack-bar-text"></div>
        <div id="snack-bar-progress"></div>
    </div>

    <div id="file-viewer"></div>

    <script type="text/javascript" src="js/signalr.min.js"></script>
    <script type="text/javascript" src="js/dropzone.js"></script>
    <script type="text/javascript" src="js/sweetalert.min.js"></script>
    <script type="text/javascript" src="js/action.js"></script>

    <script>
        processListFiles();

        var successfulCompletion = false;

        new Dropzone(document.documentElement,
        {
            paramName: "file",
            maxFilesize: @ViewBag.MaxUploadSize,
            parallelUploads: 1,
            url: "process/upload",
            clickable: ".btnUpload",
            previewsContainer: "#preview",
            processing: function (file)
            {
                clearTimeout(fadeOutTimer);

                document.getElementById("snack-bar-upload").style.display = "block";
                document.getElementById("snack-bar-upload").style.animation = "fadein 0.4s";
                document.getElementById("snack-bar-upload").style.opacity = "1";

                document.getElementById("snack-bar-loader").style.display = "block";
                document.getElementById("snack-bar-checkmark").style.display = "none";
                document.getElementById("snack-bar-x").style.display = "none";

                document.getElementById("snack-bar-progress").style.borderColor = "#2c80ff";

                document.getElementById("snack-bar-text").innerHTML = "Uploading " + file.name;
            },
            success: function (file, response)
            {
                if (response !== "0") successfulCompletion = true;
            },
            error: function (file, response)
            {
                successfulCompletion = false;

                document.getElementById("snack-bar-loader").style.display = "none";
                document.getElementById("snack-bar-checkmark").style.display = "none";

                document.getElementById("snack-bar-x").style.display = "block";
                document.getElementById("snack-bar-progress").style.borderColor = "#c14141";

                document.getElementById("snack-bar-text").innerHTML = `Failed to upload ${file.name}...`;
            },
            totaluploadprogress: function (totalProgress, totalBytes, totalBytesSent) {
                document.getElementById("snack-bar-progress").style.width = `${totalProgress}%`;
            },
            queuecomplete: function ()
            {
                fadeOutTimer = setTimeout(function () {
                    document.getElementById("snack-bar-upload").style.animation = "fadeout 0.6s";
                    document.getElementById("snack-bar-upload").style.opacity = "0";

                    fadeOutTimer = setTimeout(function () {
                        document.getElementById("snack-bar-upload").style.display = "none";
                    }, 600);

                }, 3000);
            },
            complete: function (file)
            {
                if (!successfulCompletion) return;

                document.getElementById("snack-bar-loader").style.display = "none";
                document.getElementById("snack-bar-checkmark").style.display = "block";

                document.getElementById("snack-bar-progress").style.borderColor = "#7ac142";
                document.getElementById("snack-bar-text").innerHTML = `Uploaded ${this.getAcceptedFiles().length} file${this.getAcceptedFiles().length > 1 ? 's' : ''}...`;
            }
        });

        window.addEventListener("paste", function (event) { processPaste(); });

        window.onkeypress = function (event)
        {
            if (event.keyCode === 32) return;

            var display = document.getElementById("file-viewer").style.display;

            var alert = document.getElementsByClassName("sweet-alert");
            var hide = document.getElementsByClassName("hideSweetAlert");

            if ((display === "" || display === "none")
                && (alert.length === 0 || alert.length > 0 && hide.length > 0)) {
                showSearch();
            }
        };

        window.ondblclick = function (event) { resetCutBoard(); };

        window.onclick = function (event)
        {
            resetContextMenu();

            if (event.target.id === "file-viewer") event.target.style.display = "none";
        };
        
        window.oncontextmenu = function (event)
        {
            if (event.target.className === "") contextMenu(event);
        };

        window.onresize = function (event) { resetContextMenu(); };

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("notifications")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.on("UpdateListing", () => { processListFiles(); });

        connection.onclose(() => {
            console.log("Lost connection...");
            reconnectToSignalR();
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        function reconnectToSignalR()
        {
            connection.start().catch(function (err) {
                reconnectToSignalR();
            });
        }
    </script>
</body>
</html>